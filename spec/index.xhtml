<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Specifications in Mocha</title>
  <meta name="generator" content="Mocha &lt;https://mochajs.org/&gt;" />
  <meta name="license" content="MIT" />
  <meta name="copyright" content="&#169; 2016 Kevin Locke &lt;kevin@kevinlocke.name&gt;" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous" />
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/highlight.js/9.1.0/styles/github.min.css" />
  <style type="text/css">
section section {
  margin-left: 1em;
}
section section section section {
  margin-left: 0;
}
  </style>
</head>
<body>
  <div class="container">
    <section class="suite">
      <h1>swagger-spec-validator command</h1>
      <dl>
        <dt>verifies stdin when no arguments given</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    match.object,
    match.func,
  );
swaggerSpecValidatorCmd(RUNTIME_ARGS, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>verifies stdin with &#x22;-&#x22; argument</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    match.object,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, &#x27;-&#x27;];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>verifies file named &#x22;-&#x22; with &#x22;./-&#x22; argument</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).once()
  .withArgs(
    &#x27;./-&#x27;,
    match.object,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, &#x27;./-&#x27;];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>verifies multiple named files</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).once()
  .withArgs(
    &#x27;file1&#x27;,
    match.object,
    match.func,
  );
swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).once()
  .withArgs(
    &#x27;file2&#x27;,
    match.object,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, &#x27;file1&#x27;, &#x27;file2&#x27;];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>verifies multiply named files once</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).once()
  .withArgs(
    &#x27;file1&#x27;,
    match.object,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, &#x27;file1&#x27;, &#x27;file1&#x27;];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>does not normalize paths when merging duplicates</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).once()
  .withArgs(
    &#x27;file1&#x27;,
    match.object,
    match.func,
  );
swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).once()
  .withArgs(
    &#x27;./file1&#x27;,
    match.object,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, &#x27;file1&#x27;, &#x27;./file1&#x27;];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>verifies mix of files and stdin</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).once()
  .withArgs(
    &#x27;file1&#x27;,
    match.object,
    match.func,
  );
swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).once()
  .withArgs(
    &#x27;file2&#x27;,
    match.object,
    match.func,
  );
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    match.object,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, &#x27;file1&#x27;, &#x27;-&#x27;, &#x27;file2&#x27;];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets --header Content-Type:text/plain as match(request: match(headers: [object Object]))</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets --header content-type: text/plain as match(request: match(headers: [object Object]))</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets --quiet as match(verbosity: -1)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets --url http://example.com as match(url: http://example.com)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets --verbose as match(verbosity: 1)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -H Content-Type:text/plain as match(request: match(headers: [object Object]))</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -u https://example.com/path?query as match(url: https://example.com/path?query)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -q as match(verbosity: -1)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -v as match(verbosity: 1)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -H Content-Type:  as match(request: match(headers: [object Object]))</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -H Content-Type:  text/plain  as match(request: match(headers: [object Object]))</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -H   Content-Type  : text/plain as match(request: match(headers: [object Object]))</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -H Content-Type:text/plain -H X-Foo : bar as match(request: match(headers: [object Object]))</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>-H only consumes one argument</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).once()
  .withArgs(
    &#x27;file&#x27;,
    match({
      request: match({ headers: { &#x27;Content-Type&#x27;: &#x27;text/plain&#x27; } }),
    }),
    match.func,
  );
const allArgs =
  [...RUNTIME_ARGS, &#x27;-H&#x27;, &#x27;Content-Type: text/plain&#x27;, &#x27;file&#x27;];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -qqq as match(verbosity: -3)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -vvv as match(verbosity: 3)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -qvv as match(verbosity: 1)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>interprets -u notaurl as match(url: notaurl)</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
  .withArgs(
    options.stdin,
    expectObj,
    match.func,
  );
const allArgs = [...RUNTIME_ARGS, ...args];
swaggerSpecValidatorCmd(allArgs, options);
swaggerSpecValidatorMock.verify();</code></pre></dd>
        <dt>prints error and exits for -H</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for --header</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for -H :badarg</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for -H badarg</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for -u</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for --url</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for --badtestopt</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for --help</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for -h</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for --version</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>prints error and exits for -V</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const allArgs = [...RUNTIME_ARGS, ...args];
      const code = await swaggerSpecValidatorCmd(allArgs, options);
      assert.strictEqual(code, expectCode);
      if (expectOutMsg instanceof RegExp) {
        assertMatch(options.stdout.read(), expectOutMsg);
      } else {
        assert.strictEqual(options.stdout.read(), expectOutMsg);
      }
      if (expectErrMsg instanceof RegExp) {
        assertMatch(options.stderr.read(), expectErrMsg);
      } else {
        assert.strictEqual(options.stderr.read(), expectErrMsg);
      }
      swaggerSpecValidatorMock.verify();
    }</code></pre></dd>
        <dt>normally prints valid message to stderr</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
      .withArgs(
        options.stdin,
        match.object,
        match.func,
      );
    const codeP = swaggerSpecValidatorCmd(RUNTIME_ARGS, options);
    validate.yield(null, {});
    const code = await codeP;
    assert.strictEqual(code, 0);
    assert.strictEqual(options.stdout.read(), null);
    assertMatch(options.stderr.read(), /valid/i);
  }</code></pre></dd>
        <dt>-q exits without printing valid</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
        .withArgs(
          options.stdin,
          match.object,
          match.func,
        );
      const allArgs = [...RUNTIME_ARGS, arg];
      const codeP = swaggerSpecValidatorCmd(allArgs, options);
      validate.yield(null, {});
      const code = await codeP;
      assert.strictEqual(code, 0);
      assert.strictEqual(options.stdout.read(), null);
      assert.strictEqual(options.stderr.read(), null);
    }</code></pre></dd>
        <dt>--quiet exits without printing valid</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
        .withArgs(
          options.stdin,
          match.object,
          match.func,
        );
      const allArgs = [...RUNTIME_ARGS, arg];
      const codeP = swaggerSpecValidatorCmd(allArgs, options);
      validate.yield(null, {});
      const code = await codeP;
      assert.strictEqual(code, 0);
      assert.strictEqual(options.stdout.read(), null);
      assert.strictEqual(options.stderr.read(), null);
    }</code></pre></dd>
        <dt>normally prints error messages to stderr</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
      .withArgs(
        options.stdin,
        match.object,
        match.func,
      );
    const codeP = swaggerSpecValidatorCmd(RUNTIME_ARGS, options);
    validate.yield(new Error(&#x27;testerr&#x27;), {});
    const code = await codeP;
    assert.strictEqual(code, 2);
    assert.strictEqual(options.stdout.read(), null);
    assertMatch(options.stderr.read(), /testerr/i);
  }</code></pre></dd>
        <dt>-v prints error messages with stack to stderr</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
      .withArgs(
        options.stdin,
        match.object,
        match.func,
      );
    const allArgs = [...RUNTIME_ARGS, &#x27;-v&#x27;];
    const codeP = swaggerSpecValidatorCmd(allArgs, options);
    validate.yield(new Error(&#x27;testerr&#x27;), {});
    const code = await codeP;
    assert.strictEqual(code, 2);
    assert.strictEqual(options.stdout.read(), null);
    const errStr = String(options.stderr.read());
    assertMatch(errStr, /testerr/i);
    assertMatch(errStr, new RegExp(regexpEscape(__filename)));
  }</code></pre></dd>
        <dt>normally prints validation messages to stdout</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
      .withArgs(
        options.stdin,
        match.object,
        match.func,
      );
    const codeP = swaggerSpecValidatorCmd(RUNTIME_ARGS, options);
    validate.yield(null, {
      messages: [&#x27;testmsg&#x27;],
    });
    const code = await codeP;
    assert.strictEqual(code, 1);
    assertMatch(options.stdout.read(), /testmsg/i);
    assert.strictEqual(options.stderr.read(), null);
  }</code></pre></dd>
        <dt>normally prints validation schema messages to stdout</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
      .withArgs(
        options.stdin,
        match.object,
        match.func,
      );
    const codeP = swaggerSpecValidatorCmd(RUNTIME_ARGS, options);
    validate.yield(null, {
      schemaValidationMessages: [
        { level: &#x27;level&#x27;, message: &#x27;testmsg&#x27; },
      ],
    });
    const code = await codeP;
    assert.strictEqual(code, 1);
    assertMatch(options.stdout.read(), /level.*testmsg/i);
    assert.strictEqual(options.stderr.read(), null);
  }</code></pre></dd>
        <dt>-qq exits without printing error</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
        .withArgs(
          options.stdin,
          match.object,
          match.func,
        );
      const allArgs = [...RUNTIME_ARGS, ...arg];
      const codeP = swaggerSpecValidatorCmd(allArgs, options);
      validate.yield(new Error(&#x27;testerr&#x27;), {});
      const code = await codeP;
      assert.strictEqual(code, 2);
      assert.strictEqual(options.stdout.read(), null);
      assert.strictEqual(options.stderr.read(), null);
    }</code></pre></dd>
        <dt>-qq exits without printing validation message</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
        .withArgs(
          options.stdin,
          match.object,
          match.func,
        );
      const allArgs = [...RUNTIME_ARGS, ...arg];
      const codeP = swaggerSpecValidatorCmd(allArgs, options);
      validate.yield(null, {
        messages: [&#x27;testmsg&#x27;],
        schemaValidationMessages: [
          { level: &#x27;level&#x27;, message: &#x27;testmsg&#x27; },
        ],
      });
      const code = await codeP;
      assert.strictEqual(code, 1);
      assert.strictEqual(options.stdout.read(), null);
      assert.strictEqual(options.stderr.read(), null);
    }</code></pre></dd>
        <dt>--quiet,--quiet exits without printing error</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
        .withArgs(
          options.stdin,
          match.object,
          match.func,
        );
      const allArgs = [...RUNTIME_ARGS, ...arg];
      const codeP = swaggerSpecValidatorCmd(allArgs, options);
      validate.yield(new Error(&#x27;testerr&#x27;), {});
      const code = await codeP;
      assert.strictEqual(code, 2);
      assert.strictEqual(options.stdout.read(), null);
      assert.strictEqual(options.stderr.read(), null);
    }</code></pre></dd>
        <dt>--quiet,--quiet exits without printing validation message</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
      swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
      const validate = swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).once()
        .withArgs(
          options.stdin,
          match.object,
          match.func,
        );
      const allArgs = [...RUNTIME_ARGS, ...arg];
      const codeP = swaggerSpecValidatorCmd(allArgs, options);
      validate.yield(null, {
        messages: [&#x27;testmsg&#x27;],
        schemaValidationMessages: [
          { level: &#x27;level&#x27;, message: &#x27;testmsg&#x27; },
        ],
      });
      const code = await codeP;
      assert.strictEqual(code, 1);
      assert.strictEqual(options.stdout.read(), null);
      assert.strictEqual(options.stderr.read(), null);
    }</code></pre></dd>
        <dt>rejects null args with TypeError</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    await assert.rejects(
      swaggerSpecValidatorCmd(null, options),
      TypeError,
    );
    swaggerSpecValidatorMock.verify();
  }</code></pre></dd>
        <dt>rejects empty args with TypeError</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    await assert.rejects(
      swaggerSpecValidatorCmd([], options),
      TypeError,
    );
    swaggerSpecValidatorMock.verify();
  }</code></pre></dd>
        <dt>rejects non-Array args with TypeError</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    await assert.rejects(
      swaggerSpecValidatorCmd(true, options),
      TypeError,
    );
    swaggerSpecValidatorMock.verify();
  }</code></pre></dd>
        <dt>rejects with TypeError for args.length &#x3C; 2</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    await assert.rejects(
      swaggerSpecValidatorCmd([&#x27;ha&#x27;], options),
      TypeError,
    );
    swaggerSpecValidatorMock.verify();
  }</code></pre></dd>
        <dt>rejects with TypeError without options</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    await assert.rejects(
      swaggerSpecValidatorCmd(RUNTIME_ARGS),
      TypeError,
    );
    swaggerSpecValidatorMock.verify();
  }</code></pre></dd>
        <dt>rejects with TypeError for non-object options</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    await assert.rejects(
      swaggerSpecValidatorCmd(RUNTIME_ARGS, true),
      TypeError,
    );
    swaggerSpecValidatorMock.verify();
  }</code></pre></dd>
        <dt>returns Error for non-Readable stdin</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    await assert.rejects(
      swaggerSpecValidatorCmd(RUNTIME_ARGS, { ...options, stdin: {} }),
      TypeError,
    );
    swaggerSpecValidatorMock.verify();
  }</code></pre></dd>
        <dt>returns Error for non-Writable stdout</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    await assert.rejects(
      swaggerSpecValidatorCmd(RUNTIME_ARGS, { ...options, stdout: {} }),
      TypeError,
    );
    swaggerSpecValidatorMock.verify();
  }</code></pre></dd>
        <dt>returns Error for non-Writable stderr</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/cli.js</dt>
        <dd><pre><code>async () =&#x3E; {
    swaggerSpecValidatorMock.expects(&#x27;validate&#x27;).never();
    swaggerSpecValidatorMock.expects(&#x27;validateFile&#x27;).never();
    await assert.rejects(
      swaggerSpecValidatorCmd(RUNTIME_ARGS, { ...options, stderr: {} }),
      TypeError,
    );
    swaggerSpecValidatorMock.verify();
  }</code></pre></dd>
      </dl>
    </section>
    <section class="suite">
      <h1>swagger-spec-validator</h1>
      <dl>
        <dt>validates JSON and YAML files</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/integration.js</dt>
        <dd><pre><code>async () =&#x3E; {
    const options = {
      stdin: new stream.PassThrough(),
      stdout: new stream.PassThrough({ encoding: &#x27;utf8&#x27; }),
      stderr: new stream.PassThrough({ encoding: &#x27;utf8&#x27; }),
    };
    const allArgs = [...RUNTIME_ARGS, swaggerJsonPath, swaggerYamlPath];
    const code = await swaggerSpecValidatorCmd(allArgs, options);
    assertMatch(
      {
        code,
        stdout: options.stdout.read(),
        stderr: options.stderr.read(),
      },
      match({
        code: 0,
        stdout: null,
        stderr: match(/\bvalid/i),
      }),
    );
  }</code></pre></dd>
        <dt>validates from stdin</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/integration.js</dt>
        <dd><pre><code>async () =&#x3E; {
    const options = {
      stdin: fs.createReadStream(swaggerYamlPath),
      stdout: new stream.PassThrough({ encoding: &#x27;utf8&#x27; }),
      stderr: new stream.PassThrough({ encoding: &#x27;utf8&#x27; }),
    };
    const code = await swaggerSpecValidatorCmd(RUNTIME_ARGS, options);
    assertMatch(
      {
        code,
        stdout: options.stdout.read(),
        stderr: options.stderr.read(),
      },
      match({
        code: 0,
        stdout: null,
        stderr: match(/\bvalid/i),
      }),
    );
  }</code></pre></dd>
        <dt>handles validation failures</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/integration.js</dt>
        <dd><pre><code>async () =&#x3E; {
    const options = {
      stdin: new stream.PassThrough(),
      stdout: new stream.PassThrough({ encoding: &#x27;utf8&#x27; }),
      stderr: new stream.PassThrough({ encoding: &#x27;utf8&#x27; }),
    };
    const allArgs = [...RUNTIME_ARGS, invalidYamlPath];
    const code = await swaggerSpecValidatorCmd(allArgs, options);
    assertMatch(
      {
        code,
        stdout: options.stdout.read(),
        stderr: options.stderr.read(),
      },
      match({
        code: 1,
        stdout: match(new RegExp(&#x60;^${regexpEscape(invalidYamlPath)}:&#x60;)),
        stderr: null,
      }),
    );
  }</code></pre></dd>
        <dt>handles unreadable file errors</dt>
        <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/integration.js</dt>
        <dd><pre><code>async () =&#x3E; {
    const options = {
      stdin: new stream.PassThrough(),
      stdout: new stream.PassThrough({ encoding: &#x27;utf8&#x27; }),
      stderr: new stream.PassThrough({ encoding: &#x27;utf8&#x27; }),
    };
    const nonexistentPath = &#x27;nonexistent.yaml&#x27;;
    const allArgs = [...RUNTIME_ARGS, nonexistentPath];
    const code = await swaggerSpecValidatorCmd(allArgs, options);
    assertMatch(
      {
        code,
        stdout: options.stdout.read(),
        stderr: options.stderr.read(),
      },
      match({
        code: 2,
        stdout: null,
        stderr: match(new RegExp(
          &#x60;^${regexpEscape(nonexistentPath)}:.*\\bENOENT\\b&#x60;,
        )),
      }),
    );
  }</code></pre></dd>
      </dl>
    </section>
    <section class="suite">
      <h1>swaggerSpecValidator</h1>
      <dl>
        <section class="suite">
          <h1>.validate</h1>
          <dl>
            <dt>POSTs to DEFAULT_URL by default</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testBody = &#x27;swagger&#x27;;
const response = {};
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath, testBody)
  .reply(200, response);
return swaggerSpecValidator.validate(testBody)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>POSTs to string in options.url</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testProtoHost = &#x27;http://example.com&#x27;;
const testPath = &#x27;/foo/bar?baz=quux&#x27;;
const response = {};
const ne = nock(testProtoHost)
  .post(testPath)
  .reply(200, response);
const options = { url: testProtoHost + testPath };
return swaggerSpecValidator.validate(&#x27;swagger&#x27;, options)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>POSTs to URL in options.url</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testProtoHost = &#x27;http://example.com&#x27;;
const testPath = &#x27;/foo/bar?baz=quux&#x27;;
const response = {};
const ne = nock(testProtoHost)
  .post(testPath)
  .reply(200, response);
const options = { url: new URL(testProtoHost + testPath) };
return swaggerSpecValidator.validate(&#x27;swagger&#x27;, options)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>POSTs to url.parse in options.url</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testProtoHost = &#x27;http://example.com&#x27;;
const testPath = &#x27;/foo/bar?baz=quux&#x27;;
const response = {};
const ne = nock(testProtoHost)
  .post(testPath)
  .reply(200, response);
// eslint-disable-next-line n/no-deprecated-api
const options = { url: url.parse(testProtoHost + testPath) };
return swaggerSpecValidator.validate(&#x27;swagger&#x27;, options)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>POSTs to url.parse in request options</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testProtoHost = &#x27;http://example.com&#x27;;
const testPath = &#x27;/foo/bar?baz=quux&#x27;;
const response = {};
const ne = nock(testProtoHost)
  .post(testPath)
  .reply(200, response);
// eslint-disable-next-line n/no-deprecated-api
const options = { request: url.parse(testProtoHost + testPath) };
return swaggerSpecValidator.validate(&#x27;swagger&#x27;, options)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>path in request options overrides path in options.url</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testProtoHost = &#x27;http://example.com&#x27;;
const testPath1 = &#x27;/foo/bar?baz=quux&#x27;;
const testPath2 = &#x27;/foo2/bar2?baz2=quux2&#x27;;
const response = {};
const ne = nock(testProtoHost)
  .post(testPath2)
  .reply(200, response);
const options = {
  request: { path: testPath2 },
  url: testProtoHost + testPath1,
};
return swaggerSpecValidator.validate(&#x27;swagger&#x27;, options)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>POSTs to URL path in request options with default host</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testPath = &#x27;/foo/bar?baz=quux&#x27;;
const response = {};
const ne = nock(defaultProtoHost)
  .post(testPath)
  .reply(200, response);
const options = { request: { path: testPath } };
return swaggerSpecValidator.validate(&#x27;swagger&#x27;, options)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>sends Accept: application/json by default</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Accept&#x27;, &#x27;application/json&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validate(&#x27;swagger&#x27;)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>sends User-Agent with package version by default</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const uaRE = new RegExp(
  &#x60;^${regexpEscape(&#x60;${packageJson.name}/${packageJson.version}&#x60;)}&#x60;,
);
const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;User-Agent&#x27;, uaRE)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validate(&#x27;swagger&#x27;)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>can override default headers</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const uaRE = new RegExp(
  &#x60;^${regexpEscape(&#x60;${packageJson.name}/${packageJson.version}&#x60;)}&#x60;,
);
const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Accept&#x27;, &#x27;text/plain&#x27;)
  .matchHeader(&#x27;User-Agent&#x27;, uaRE)
  .post(defaultUrlPath)
  .reply(200, response);
const options = { request: { headers: { Accept: &#x27;text/plain&#x27; } } };
return swaggerSpecValidator.validate(&#x27;swagger&#x27;, options)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>can override default headers case-insensitively</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const uaRE = new RegExp(
  &#x60;^${regexpEscape(&#x60;${packageJson.name}/${packageJson.version}&#x60;)}&#x60;,
);
const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Accept&#x27;, &#x27;text/plain&#x27;)
  .matchHeader(&#x27;User-Agent&#x27;, uaRE)
  .post(defaultUrlPath)
  .reply(200, response);
const options = { request: { headers: { accept: &#x27;text/plain&#x27; } } };
return swaggerSpecValidator.validate(&#x27;swagger&#x27;, options)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>returns Error for invalid JSON body</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testStatusCode = 200;
const testResponse = &#x27;{&#x22;bad&#x22;: &#x22;json&#x22;&#x27;;
const testType = &#x27;application/json&#x27;;
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath)
  .reply(testStatusCode, testResponse, { &#x27;Content-Type&#x27;: testType });
return swaggerSpecValidator.validate(&#x27;swagger&#x27;)
  .then(
    neverCalled,
    (err) =&#x3E; {
      assert.strictEqual(err.statusCode, testStatusCode);
      assert.strictEqual(err.headers[&#x27;content-type&#x27;], testType);
      assert.strictEqual(String(err.body), testResponse);
      ne.done();
    },
  );</code></pre></dd>
            <dt>returns Error with JSON body for 4XX/5XX response</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = { message: &#x27;test&#x27; };
const testStatusCode = 400;
const testType = &#x27;application/json&#x27;;
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath)
  .reply(testStatusCode, response, { &#x27;Content-Type&#x27;: testType });
return swaggerSpecValidator.validate(&#x27;swagger&#x27;)
  .then(
    neverCalled,
    (err) =&#x3E; {
      assert.strictEqual(err.statusCode, testStatusCode);
      assert.strictEqual(err.headers[&#x27;content-type&#x27;], testType);
      assert.deepStrictEqual(err.body, response);
      ne.done();
    },
  );</code></pre></dd>
            <dt>returns Error with non-JSON body for 4XX/5XX response</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = &#x27;test message&#x27;;
const testStatusCode = 500;
const testType = &#x27;text/plain&#x27;;
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath)
  .reply(testStatusCode, response, { &#x27;Content-Type&#x27;: testType });
return swaggerSpecValidator.validate(&#x27;swagger&#x27;)
  .then(
    neverCalled,
    (err) =&#x3E; {
      assert.strictEqual(err.statusCode, testStatusCode);
      assert.strictEqual(err.headers[&#x27;content-type&#x27;], testType);
      assert.strictEqual(String(err.body), response);
      ne.done();
    },
  );</code></pre></dd>
            <dt>returns Error for unsupported protocol in request options</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>// eslint-disable-next-line n/no-deprecated-api
const options = { request: url.parse(&#x27;ftp://example.com&#x27;) };
return swaggerSpecValidator.validateFile(swaggerJsonPath, options)
  .then(
    neverCalled,
    (err) =&#x3E; {
      assert.ok(/ftp/.test(err.message));
    },
  );</code></pre></dd>
            <dt>returns validator JSON with errors</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testBody = &#x27;swagger&#x27;;
const response = { messages: [&#x27;test1&#x27;, &#x27;test2&#x27;] };
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath, testBody)
  .reply(200, response);
return swaggerSpecValidator.validate(testBody)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>can be called with callback without options</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testBody = &#x27;swagger&#x27;;
const testResponse = {};
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath, testBody)
  .reply(200, testResponse);
swaggerSpecValidator.validate(testBody, (err, result) =&#x3E; {
  assert.ifError(err);
  assert.deepStrictEqual(result, testResponse);
  ne.done();
  done();
});</code></pre></dd>
            <dt>throws for non-function callback</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testBody = &#x27;swagger&#x27;;
assert.throws(
  () =&#x3E; {
    swaggerSpecValidator.validate(testBody, {}, true);
  },
  TypeError,
  /\bcallback\b/,
);</code></pre></dd>
            <dt>accepts spec as Buffer</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testBody = &#x27;swagger&#x27;;
const response = {};
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath, testBody)
  .reply(200, response);
return swaggerSpecValidator.validate(Buffer.from(testBody))
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>accepts spec as Uint8Array</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testBody = &#x27;swagger&#x27;;
const response = {};
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath, testBody)
  .reply(200, response);
return swaggerSpecValidator.validate(
  new Uint8Array(Buffer.from(testBody)),
)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>Error for non-string, non-Buffer, non-Readable spec</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>return swaggerSpecValidator.validate(true)
  .then(
    neverCalled,
    (err) =&#x3E; {
      assert.ok(err instanceof TypeError);
      assert.ok(/\bspec\b/.test(err.message));
    },
  );</code></pre></dd>
            <dt>Error for non-object options</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testBody = &#x27;swagger&#x27;;
return swaggerSpecValidator.validate(testBody, true)
  .then(
    neverCalled,
    (err) =&#x3E; {
      assert.ok(err instanceof TypeError);
      assert.ok(/\boptions\b/.test(err.message));
    },
  );</code></pre></dd>
            <dt>Error for non-Writable options.err</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testBody = &#x27;swagger&#x27;;
const options = { err: new stream.Readable() };
return swaggerSpecValidator.validate(testBody, options)
  .then(
    neverCalled,
    (err) =&#x3E; {
      assert.ok(err instanceof TypeError);
      assert.ok(/\boptions\.err\b/.test(err.message));
    },
  );</code></pre></dd>
          </dl>
        </section>
        <section class="suite">
          <h1>.validateFile</h1>
          <dl>
            <dt>POSTs to DEFAULT_URL by default</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validateFile(swaggerJsonPath)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>adds Content-Type: application/json for .json files</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validateFile(swaggerJsonPath)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>adds Content-Type: application/yaml .yaml files</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, &#x27;application/yaml&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validateFile(swaggerYamlPath)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>adds Content-Type: application/json for non-.json JSON files</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validateFile(swaggerJsonPath.slice(0, -3))
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>adds Content-Type: application/yaml for non-.yaml YAML files</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, &#x27;application/yaml&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validateFile(swaggerYamlPath.slice(0, -3))
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>adds Content-Type: application/yaml for non-JSON files</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, &#x27;application/yaml&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validateFile(emptyPath)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>adds Content-Type: application/json for JSON content</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validate(&#x27;{}&#x27;)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>adds Content-Type: application/yaml for non-JSON content</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, &#x27;application/yaml&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validate(&#x27;swagger: &#x22;2.0&#x22;&#x27;)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>adds Content-Type: application/json for JSON stream</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const spec = new stream.PassThrough();
spec.end(&#x27;{}&#x27;);
const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validate(spec)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>adds Content-Type: application/yaml for non-JSON stream</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const spec = new stream.PassThrough();
spec.end(&#x27;swagger: &#x22;2.0&#x22;&#x27;);
const response = {};
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, &#x27;application/yaml&#x27;)
  .post(defaultUrlPath)
  .reply(200, response);
return swaggerSpecValidator.validate(spec)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>does not change caller-provided Content-Type</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const testType = &#x27;text/plain&#x27;;
const ne = nock(defaultProtoHost)
  .matchHeader(&#x27;Content-Type&#x27;, testType)
  .post(defaultUrlPath)
  .reply(200, response);
const options = { request: { headers: { &#x27;content-type&#x27;: testType } } };
return swaggerSpecValidator.validateFile(swaggerYamlPath, options)
  .then((result) =&#x3E; {
    assert.deepStrictEqual(result, response);
    ne.done();
  });</code></pre></dd>
            <dt>can be called with callback without options</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const response = {};
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath)
  .reply(200, response);
swaggerSpecValidator.validateFile(swaggerYamlPath, (err, result) =&#x3E; {
  assert.ifError(err);
  assert.deepStrictEqual(result, response);
  ne.done();
  done();
});</code></pre></dd>
            <dt>returns Error for unreadable file</dt>
            <dt>/home/kevin/src/node-projects/swagger-spec-validator/test/swagger-spec-validator.js</dt>
            <dd><pre><code>const testStatusCode = 200;
const testResponse = {};
const ne = nock(defaultProtoHost)
  .post(defaultUrlPath)
  .optionally()
  .reply(testStatusCode, testResponse);
return swaggerSpecValidator.validateFile(&#x27;nonexistent.yaml&#x27;)
  .then(
    neverCalled,
    (err) =&#x3E; {
      assert.strictEqual(err.code, &#x27;ENOENT&#x27;);
      ne.done();
    },
  );</code></pre></dd>
          </dl>
        </section>
      </dl>
    </section>
  </div><!-- .container -->

  <script type="text/javascript" src="https://cdn.jsdelivr.net/jquery/2.2.1/jquery.min.js"></script>
  <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/highlight.js/9.1.0/highlight.min.js"></script>
  <script type="text/javascript">//<![CDATA[
'use strict';
// Adjust the nested heading level to match depth
$('section section h1').each(function() {
  var $this = $(this);
  var depth = Math.min($this.parents('section').length, 6);
  // http://stackoverflow.com/a/30059450/503410
  $this.wrapInner(document.createElement('h' + depth)).children().unwrap();
});

// Make the tests collapsible
var testNum = 0;
$('dt + dd')
  .addClass('collapse')
  .attr('role', 'tabpanel')
  .attr('aria-expanded', 'false')
  .each(function() {
    var $this = $(this);
    var $dt = $this.prev();

    ++testNum;
    var id = 'test' + testNum;
    var idDt = id + '-title';
    var idDd = id + '-desc';

    $dt.attr('id', idDt);
    $this.attr('id', idDd);

    $dt.wrapInner('<a role="button" data-toggle="collapse" href="#' + idDd +
        '" aria-expanded="false" aria-controls="' + idDd + '"></a>')
      .children()
      .collapse();
  });

// Enable syntax highlighting for the code (which is all JavaScript)
hljs.configure({languages: ['javascript']});
hljs.initHighlighting();
//]]></script>
</body>
</html>
