# ESLint configuration
# Intended to be a strict superset of Node core style, with the exception of
# rules which would cause breakage in supported Node versions.
# Uses Airbnb's styles where they don't conflict with Node core or my prefs.

extends: "airbnb-base"

parserOptions:
  sourceType: "script"

env:
  node: true
  ## disable unwanted browser env from airbnb/legacy
  # Note: Only works for ESLint 2+: https://github.com/eslint/eslint/issues/3915
  browser: false

globals:
  Promise: false

rules:
  # Possible Errors
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#possible-errors
  ## disallow trailing commas in array and object literals
  comma-dangle: [2, "never"]

  # Best Practices
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#best-practices
  ## require curly braces around all control statements
  curly: [2, "all"]
  ## allow multiple spaces only before EOL
  no-multi-spaces: [2, { "ignoreEOLComments": true }]
  ## allow reassignment of function parameters
  # simplicity for optional arguments outweighs the perf advantage, usually
  no-param-reassign: 0
  ## disallow unnecessary use of Function.prototype.{apply,call}
  no-useless-call: 2
  ## allow vars anywhere that satisfies other linting constraints
  vars-on-top: 0

  # Strict Mode
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#strict-mode
  ## 'use strict' on top
  strict: [2, "global"]

  # Variables
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#variables
  ## disallow shadowing of variables
  no-shadow: [2, { "builtinGlobals": true, "hoist": "all" }]
  ## disallow declaration of variables that are not used in the code
  # allow unused args for documentation, future use, and correct .length
  no-unused-vars: [2, {"args": "none"}]
  ## disallow referencing variables before declaring them, excluding functions
  # since it is required for mutually-recursive functions
  no-use-before-define: [2, "nofunc"]

  # Stylistic Issues
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#stylistic-issues
  ## require spaces around single-line blocks
  block-spacing: [2, "always"]
  ## allow unnamed functions
  func-names: 0
  ## enforce consistent line breaks inside function parentheses
  # Would prefer multiline if it allowed line breaks for single argument
  # Since it doesn't, use consistent
  function-paren-newline: [2, "consistent"]
  ## don't enforce consistent linebreak style
  # Allow developers to develop with native EOL.  VCS manages committed style.
  linebreak-style: 0
  ## enforce a maximum line length
  # reduce from 100 to 80 chars (conventional terminal width)
  # ignore lines which consist of a single string, URL, or RegExp literal,
  # possibly prefixed with comment opener or suffixed with ";".
  # (Not ESLint ignore props which ignores any lines which contain these.)
  #
  # Note: Change // to /[/] to avoid getting mangled as a JS comment.
  #       https://github.com/eslint/eslint/pull/9226
  max-len: [2, 80, 2, {
    ignorePattern: '^\s*((/?\*|/[/])\s*)?(''[^''\\]*(\\.[^''\\]*)*''|"[^"\\]*(\\.[^"\\]*)*"|/[^/\\]*(\\.[^/\\]*)*/[gimuy]*|[^:/?#\s]+:/[/]\S+);?$'
  }]
  ## require parens for Constructor
  new-parens: 2
  ## allow nested ternary expressions
  # if they are indented one-expression-per-line, they are clear enough for me
  no-nested-ternary: 0
  ## disallow process.exit()
  # this is disabled locally only when require.main === module
  no-process-exit: 2
  ## disallow extra spaces in object literals
  object-curly-spacing: [2, "never"]
  ## allow multiple variable declarations per block/function and multiple
  ## declarators per declaration
  one-var: 0
  ## require initialized variables to be declared on separate lines
  one-var-declaration-per-line: [2, "initializations"]
  ## Requires operator at the beginning of the line in multiline statements
  # Airbnb prevents breaks around =, suggesting ().  I don't see the advantage.
  operator-linebreak: [2, "before"]
  ## no space before function, eg. 'function()'
  space-before-function-paren: [2, "never"]

  # ECMAScript 6 Rules
  # list: https://github.com/eslint/eslint/tree/master/docs/rules#ecmascript-6
  ## require parentheses around arrow function arguments (as Node core does)
  arrow-parens: [2, "always"]

  # eslint-plugin-import
  ## Allow requiring devDependencies for build and test
  import/no-extraneous-dependencies: [2, {
    "devDependencies": [
      "gulpfile.js",
      "test-bin/**",
      "test-lib/**",
      "test/**"
    ]
  }]

# vi: set sts=2 sw=2 et ft=yaml:
